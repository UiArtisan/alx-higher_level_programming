==============================
 How to Use matrix_divided.py
==============================

This module defines a matrix division function ``matrix_divided(matrix, div)``.

Usage
=====

``matrix_divided(...)`` returns a new matrix that is a copy of the parameter
``matrix`` with all elements divided by ``div``. Quotients are rounded to a maximum of two decimal places.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [6, 9, 12],
    ...     [24, 30, 36]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    [[3.0, 4.5, 6.0], [12.0, 15.0, 18.0]]

::

    >>> matrix = [
    ...     [2, 4, 6],
    ...     [8, 10, 12]
    ... ]
    >>> print(matrix_divided(matrix, 4))
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

::

    >>> m = [[10, 15, 20], [40, 50, 60]]
    >>> matrix_divided(m, 5)
    [[2.0, 3.0, 4.0], [8.0, 10.0, 12.0]]
    >>> m[1][1]
    50

::

    >>> matrix_divided([[5, 10, 15], [20, 25, 30]], -2)
    [[-2.5, -5.0, -7.5], [-10.0, -12.5, -15.0]]

::

    >>> matrix_divided([[8, 16, 24], [32, 40, 48]], 2)
    [[4.0, 8.0, 12.0], [16.0, 20.0, 24.0]]

::

    >>> matrix_divided([[3, 6, 9], [12, 15, 18]], 0.5)
    [[6.0, 12.0, 18.0], [24.0, 30.0, 36.0]]

::

    >>> matrix_divided([[4, 8, 12], [16, 20, 24]], float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

::

    >>> matrix_divided([[7, 14, 21], [28, 35, 42]], float('nan'))
    [[nan, nan, nan], [nan, nan, nan]]

::

    >>> matrix_divided([[2, 4, 8], [1, 2, 3]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

::

    >>> matrix_divided(None, 1)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix_divided([[]], 10)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix_divided([[6, 12, 18], [24, "foo", 36]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix_divided([[6, 12, 18], [6, 9]], 2)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

::

    >>> matrix_divided([[], [], []], 10)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix_divided("foo", 1)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix_divided([], 1)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix_divided([[2]], "foo")
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

::

    >>> matrix_divided()
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

::

    >>> matrix_divided([[0, 0, 0], [0, 0, 0]], 4)
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

::

    >>> matrix_divided([[5, 10, 15], [20, 25, 30]], -4)
    [[-1.25, -2.5, -3.75], [-5.0, -6.25, -7.5]]

::

    >>> matrix_divided([[-1, -2, -3], [1, 2, 3]], -0.25)
    [[4.0, 8.0, 12.0], [-4.0, -8.0, -12.0]]

::

    >>> matrix_divided([[0.25, 0.5], [0.75, 1.0]], 0.25)
    [[1.0, 2.0], [3.0, 4.0]]

::

    >>> matrix_divided([[3, 6], [9, 12], [15, 18]], 2.5)
    [[1.2, 2.4], [3.6, 4.8], [6.0, 7.2]]
