======================
3-say_my_name
======================

Say my name module is the unit test that verifies the print of first and last name.

=====================

Valid Names:

::

    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("Alice", "Johnson")
    My name is Alice Johnson

First Name Only:

::

    >>> say_my_name("Bob")
    My name is Bob 

Empty First Name:

::

    >>> say_my_name("", "Davis")
    My name is  Davis

Empty Last Name:

::

    >>> say_my_name("Ella", "")
    My name is Ella 

First Name as a Number (TypeError Expected):

::

    >>> say_my_name(123, "David")
    Traceback (most recent call last):
    TypeError: first_name must be a string

Last Name as a Number (TypeError Expected):

::

    >>> say_my_name("Eve", 456)
    Traceback (most recent call last):
    TypeError: last_name must be a string

Both Names as Lists (TypeError Expected):

::

    >>> say_my_name(["Frank", "Miller"], ["Grace", "Davis"])
    Traceback (most recent call last):
    TypeError: first_name must be a string

Missing Both Names (TypeError Expected):

::

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

First Name as None (TypeError Expected):

::

    >>> say_my_name(None, "Smith")
    Traceback (most recent call last):
    TypeError: first_name must be a string

Last Name as None (TypeError Expected):

::

    >>> say_my_name("Alice", None)
    Traceback (most recent call last):
    TypeError: last_name must be a string

Using ``3-say_my_name`` module:

::

    >>> say_my_name = __import__('3-say_my_name').say_my_name

Test basic:

::

    >>> say_my_name("Isabelle", "Parker")
    My name is Isabelle Parker

Test firstname:

::

    >>> say_my_name("Jack")
    My name is Jack 

Test lastname empty:

::

    >>> say_my_name("Katie", "")
    My name is Katie 

Test both names empty:

::

    >>> say_my_name("", "")
    My name is  

Test just spaces:

::

    >>> say_my_name("   ", "   ")
    My name is        

Test empty firstname:

::

    >>> say_my_name("", "Leo")
    My name is  Leo

Test not a string in arg1 (TypeError Expected):

::

    >>> say_my_name(555, "Mia")
    Traceback (most recent call last):
    TypeError: first_name must be a string

Test not a string in arg2 (TypeError Expected):

::

    >>> say_my_name("Nathan", 999)
    Traceback (most recent call last):
    TypeError: last_name must be a string

Test not a string in arg1 and arg2 (TypeError Expected):

::

    >>> say_my_name(777, 888)
    Traceback (most recent call last):
    TypeError: first_name must be a string

Missing 2 args (TypeError Expected):

::

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'
